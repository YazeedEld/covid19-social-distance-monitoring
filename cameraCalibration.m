% Define images to process
imageFileNames = {'C:\Users\yazee\OneDrive\Documents\MATLAB\Computer Vision\Lab3\checkboard\Webp.net-resizeimage (1).jpg',...
    'C:\Users\yazee\OneDrive\Documents\MATLAB\Computer Vision\Lab3\checkboard\Webp.net-resizeimage (2).jpg',...
    'C:\Users\yazee\OneDrive\Documents\MATLAB\Computer Vision\Lab3\checkboard\Webp.net-resizeimage (3).jpg',...
    'C:\Users\yazee\OneDrive\Documents\MATLAB\Computer Vision\Lab3\checkboard\Webp.net-resizeimage (4).jpg',...
    'C:\Users\yazee\OneDrive\Documents\MATLAB\Computer Vision\Lab3\checkboard\Webp.net-resizeimage (5).jpg',...
    'C:\Users\yazee\OneDrive\Documents\MATLAB\Computer Vision\Lab3\checkboard\Webp.net-resizeimage (6).jpg',...
    'C:\Users\yazee\OneDrive\Documents\MATLAB\Computer Vision\Lab3\checkboard\Webp.net-resizeimage (7).jpg',...
    'C:\Users\yazee\OneDrive\Documents\MATLAB\Computer Vision\Lab3\checkboard\Webp.net-resizeimage.jpg',...
    };
% Detect checkerboards in images
[imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames);
imageFileNames = imageFileNames(imagesUsed);

% Read the first image to obtain image size
originalImage = imread(imageFileNames{1});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates of the corners of the squares
squareSize = 28;  % in units of 'millimeters'
worldPoints = generateCheckerboardPoints(boardSize, squareSize);

% Calibrate the camera
[cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows, ncols]);

